You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.








--------------------------------------------------------------------------------------------------------




class Solution {
    public ListNode addTwoNumbers(ListNode head1, ListNode head2) {
   
   int carry=0;
   int sum=0;
   ListNode start=null,end=null;

   while(head1!=null || head2!=null) {
       
   sum+=(head1!=null)?head1.val:0;
   sum+=(head2!=null)?head2.val:0;
   sum+=carry;

   if(sum>=10){carry=1; sum=sum%10;}
   else carry=0;

   ListNode curr =new ListNode(sum);

   if(end==null)
      start=end=curr;

   else{
	  end.next=curr;
	  end=curr; }

   sum=0;

   if(head1!=null)
     head1=head1.next;

   if(head2!=null)
	 head2=head2.next; }
        
   if(carry==1)
      end.next=new ListNode(1);
        
   return start;      
    }
}
