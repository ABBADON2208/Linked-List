/* suppose we have two number(two number represented in linked) subtract the two and give the resultant linked list

eg -              
      7->5->9->4->6->NULL
               8->4->NULL
      ------------------
      7->5->8->6->2->NULL
      
2nd linked list should be subtracted from the last of the first linked list  */


// the idea is two reverse them and subtract them by taking carry


import java.util.*;


class LinkedList {
public static Node head1,head2;

static class Node {
Node next;
int data;

Node(int data) {
   this.data=data;
   this.next=null;	
}
} 	



public void displayLinkedList(Node head){

if(head==null)
  System.out.println("List Is Empty");

Node temp=head;

while(temp!=null){
System.out.print(temp.data+"->");
temp=temp.next;
}
System.out.print("NULL");
System.out.println();
}




public static Node subtract(Node head1,Node head2) {
	
int carry=0;
int sum=0;
Node start=null,end=null;


while(head1!=null || head2!=null) {

sum+=(head1!=null)?head1.data:0;
sum-=(head2!=null)?head2.data:0;
sum+=carry;

if(sum<0){carry=-1; sum=sum+10;}
else carry=0;

Node curr =new Node(sum);

if(end==null)
 start=end=curr;

else{
	end.next=curr;
	end=curr; }

sum=0;

if(head1!=null)
  head1=head1.next;

if(head2!=null)
	head2=head2.next; }

return start;
}





public static Node reverseLinkedList(Node head) {

if(head==null || head.next==null)
return head;

Node previous=null,curr=head,forward=null;

while(curr.next!=null) {
forward=curr.next;
curr.next=previous;
previous=curr;
curr=forward; }

head=curr;
head.next=previous;
return head;
}



public static void main(String... args) throws Exception
{
	LinkedList list = new LinkedList();
	list.head1 = new Node(7);
    list.head1.next = new Node(5);
    list.head1.next.next = new Node(9);
    list.head1.next.next.next = new Node(4);
    list.head1.next.next.next.next = new Node(6);
 

    
	list.head2 = new Node(8);
    list.head2.next = new Node(4);


	
	
	list.displayLinkedList(head1);
	list.displayLinkedList(head2);
	head1=list.reverseLinkedList(head1);
	head2=list.reverseLinkedList(head2);
	

    Node curr=subtract(head1,head2);
    curr=list.reverseLinkedList(curr);
    list.displayLinkedList(curr);

}
}

